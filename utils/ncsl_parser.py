#!/usr/bin/env python

"""
This program generates a csv file of the dominant party in each state legislature for a given year.

As input it takes a directory of xml files generated by pdftohtml from pdfs from the NCSL website.

As output it generates a csv file with the columns being the year and rows being the states. The data
should be either "Rep", "Dem", or "Divided".
"""

from collections import defaultdict
import os
from xml.dom.minidom import parse

from state_names import state_names

class State:
    def __init__(self, name):
        self.name = name
        self.data = {}
        
class PdfDoc:
    def __init__(self, states, path):
        self.states = states
        basename = os.path.basename(path)
        year = os.path.splitext(basename)[0]
        
        self.doc = parse(path)
        self.lines = defaultdict(lambda : Line())
        if '_' in year:
            self.parse_years()
        else:
            self.parse_year(year)

    def parse_years(self):
        print('parsing years')

    def parse_year(self, year):
        print('parsing year', year)
        for node in self.doc.getElementsByTagName('text'):
            self.lines[node.getAttribute('top')].nodes.append(node)
        for line in self.lines.values():
            if line.state in self.states:
                states[line.state].data[year] = line.party
class Line:
    def __init__(self):
        self.nodes = []
        self.sorted_nodes = None

    @property
    def data(self):
        if not self.sorted_nodes:
            self.sorted_nodes = sorted(self.nodes, key = lambda x: int(x.getAttribute('left')))
        return self.sorted_nodes
    
    @property
    def party(self):
        p = self.data[-3].childNodes[0].toxml().strip().replace('*', '')
        if p not in set(['Rep', 'Dem', 'Split', 'Divided',]):
            raise Exception("No such party {} in {}".format(p, self.state))
        if p == 'Split':
            return 'Divided'
        return p

    @property
    def state(self):
        return self.data[0].childNodes[0].toxml().strip().replace('*', '')
        
if __name__ == '__main__':
    states = {}
    for n in state_names:
        states[n] = State(n)
    
    for fn in os.listdir('xml'):
        PdfDoc(states, 'xml/{}'.format(fn))

    for state in states.values():
        print(state.name, state.data)
